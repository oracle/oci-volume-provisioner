box: golang:1.9

dev:
  steps:
    - internal/shell

build:
  base-path: "/go/src/github.com/oracle/oci-volume-provisioner"
  steps:

    - script:
      name: check boilerplate
      code: ./hack/verify-boilerplate.sh

    - script:
      name: validate source code
      code: |
        go get -u github.com/golang/lint/golint
        make gofmt golint govet

    - script:
      name: run unit tests
      code: make test

    - script:
      name: build
      code: make build

    - script:
      name: write VERSION.txt
      code: |
        make version > dist/VERSION.txt
        cat dist/VERSION.txt

copy:
  steps:
    - script:
      name: copy build/test artifacts
      code: |
        cp -a dist ${WERCKER_OUTPUT_DIR}
        cp -a test ${WERCKER_OUTPUT_DIR}
        cp -a manifests ${WERCKER_OUTPUT_DIR}
        cp -a examples ${WERCKER_OUTPUT_DIR}
        cp -a pkg ${WERCKER_OUTPUT_DIR}
        cp -a vendor ${WERCKER_OUTPUT_DIR}

push:
  box:
    id: oraclelinux:7.3
  steps:
    - script:
      name: set ENV vars
      code: |
        export VERSION=$(cat dist/VERSION.txt)
        echo "Pushing version ${VERSION}"

    - script:
        name: Ensure version is unique
        code: |
          if curl -s https://api.github.com/repos/oracle/oci-volume-provisioner/git/refs/tags | grep "tags/$VERSION"; then
            echo "Tag $VERSION already exists. Doing nothing."
            exit 1
          fi

    - script:
      name: prepare
      code: |
        cp ./dist/oci-volume-provisioner /oci-volume-provisioner
        chmod +x /oci-volume-provisioner

    - script:
      name: Install SSL
      code: |
        yum install -y openssl ca-certificates && yum clean all

    - internal/docker-push:
      repository: iad.ocir.io/oracle/oci-volume-provisioner
      tag: $VERSION
      entrypoint: /oci-volume-provisioner
      user: 65534 # nobody
      registry: https://iad.ocir.io/v2
      username: $OCIRUSERNAME
      password: $OCIRPASSWORD

    - internal/docker-push:
      repository: lhr.ocir.io/oracle/oci-volume-provisioner
      tag: $VERSION
      entrypoint: /oci-volume-provisioner
      user: 65534 # nobody
      registry: https://lhr.ocir.io/v2
      username: $OCIRUSERNAME
      password: $OCIRPASSWORD

    - internal/docker-push:
      repository: phx.ocir.io/oracle/oci-volume-provisioner
      tag: $VERSION
      entrypoint: /oci-volume-provisioner
      user: 65534 # nobody
      registry: https://phx.ocir.io/v2
      username: $OCIRUSERNAME
      password: $OCIRPASSWORD

    - internal/docker-push:
      repository: fra.ocir.io/oracle/oci-volume-provisioner
      tag: $VERSION
      entrypoint: /oci-volume-provisioner
      user: 65534 # nobody
      registry: https://fra.ocir.io/v2
      username: $OCIRUSERNAME
      password: $OCIRPASSWORD

system-test:
  base-path: "/go/src/github.com/oracle/oci-volume-provisioner"
  box: 
    id: iad.ocir.io/spinnaker/oci-ci-e2e:1.0.1
  steps: 
    - script: 
      name: e2e tests
      code: |
        export OCICONFIG="/tmp/ociconfig"
        echo -n "${OCICONFIG_VAR}" | openssl enc -base64 -d -A > "${OCICONFIG}"
        export KUBECONFIG="/tmp/kubeconfig"
        echo -n "${KUBECONFIG_VAR}" | openssl enc -base64 -d -A > "${KUBECONFIG}"
        ginkgo \
          -v \
          -skip="fss|FSS" \
          test/e2e -- \
          --kubeconfig="${KUBECONFIG}" \
          --ociconfig="${OCICONFIG}" \
          --subnet-id="${SUBNET_OCID}" \
          --mnt-target-id="${MNT_TARGET_OCID}" \
          --delete-namespace-on-failure=false \
          --image="${IMAGE}:${VERSION}"

validate-test-image:
  box:
    id: iad.ocir.io/oracle/oci-volume-provisioner-system-test:1.0.2
  steps:
    - script:
      name: set ENV vars
      code: |
        export VERSION=$(cat dist/VERSION.txt)
        echo "Test image version ${VERSION}"

    - script:
        name: validate test image
        code: |
          cd ./test/system
          ./run-test-image.sh $VERSION

release:
  box:
    id: oraclelinux:7-slim
  steps:
    - script:
        name: set ENV vars
        code: |
          export VERSION=$(cat dist/VERSION.txt)
          echo "${VERSION}"

    - script:
        name: Ensure version is unique
        code: |
          if curl -s https://api.github.com/repos/oracle/oci-volume-provisioner/git/refs/tags | grep "tags/$VERSION"; then
            echo "Tag $VERSION already exists. Doing nothing."
            exit 1
          fi

    - github-create-release:
      token: $GITHUB_TOKEN
      tag: $VERSION
      title: $VERSION
      draft: false

    - github-upload-asset:
      token: $GITHUB_TOKEN
      file: ./dist/oci-volume-provisioner.yaml
      filename: oci-volume-provisioner.yaml
      content-type: text/yaml

    - github-upload-asset:
      token: $GITHUB_TOKEN
      file: ./dist/oci-volume-provisioner-rbac.yaml
      filename: oci-volume-provisioner-rbac.yaml
      content-type: text/yaml

    - github-upload-asset:
      token: $GITHUB_TOKEN
      file: ./dist/storage-class-ext3.yaml
      filename: storage-class-ext3.yaml
      content-type: text/yaml

    - github-upload-asset:
      token: $GITHUB_TOKEN
      file: ./dist/storage-class.yaml
      filename: storage-class.yaml
      content-type: text/yaml